<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C#学习笔记</title>
    <url>/hexo-test/2020/03/03/C#%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/C#%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="1、-命名空间"><a href="#1、-命名空间" class="headerlink" title="1、    命名空间"></a>1、    命名空间</h1><p>C#程是利用命名空间组织起来的。如果要调用某个命名空间的额类或者方法，则需要用 using 引入命名空间<br>    *using 指令的基本形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">using 命名空间名;*</span><br></pre></td></tr></table></figure>
<p>当使用命名空间内的类时 （如一个N1的命名空间有一个类A中有一个方法Myls），需要实例化这个类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*A oa &#x3D; new A();		&#x2F;&#x2F;实例化类</span><br><span class="line">oa.Myls();		&#x2F;&#x2F;调用类A中的Myls方法*</span><br></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">using N1;	&#x2F;&#x2F;使用using指令引入命名空间N1</span><br><span class="line">namespace Test02</span><br><span class="line">&#123;</span><br><span class="line">	class Program</span><br><span class="line">	&#123;</span><br><span class="line">		static void Main(string[] args)</span><br><span class="line">		&#123;</span><br><span class="line">			A oa &#x3D; new A();</span><br><span class="line">			oa.Myls();</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace N1		&#x2F;&#x2F;建立命名空间 N1</span><br><span class="line">&#123;</span><br><span class="line">	class A		&#x2F;&#x2F;在N1中声明一个类A</span><br><span class="line">	&#123;</span><br><span class="line">		public void Myls()</span><br><span class="line">		&#123;</span><br><span class="line">			Console.WriteLine (&quot;...&quot;);		&#x2F;&#x2F;C#中输出字符串</span><br><span class="line">			Console.ReadLine();		&#x2F;&#x2F;等待输入</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>#2、    类#</p>
<p>类是一种数据结构，他可以封装数据成员、函数成员和其他的类。C#中的所有语句都必须位于类内。使用任何新的类之前都必须声明它，一个类一旦被声明，就可以当做一种新的类型来使用。在C#中通过class关键字来声明。<br>实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Class MyClass</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="3、Main"><a href="#3、Main" class="headerlink" title="3、Main"></a>3、Main</h1><p><img src="/Main1.png" alt="Main示例"></p>
<h1 id="4、标识符及关键字"><a href="#4、标识符及关键字" class="headerlink" title="4、标识符及关键字"></a>4、标识符及关键字</h1><p>标识符命名规则：</p>
<h1 id="5、变量类型"><a href="#5、变量类型" class="headerlink" title="5、变量类型"></a>5、变量类型</h1><pre><code>1.值类型</code></pre><h1 id="6、引用类型"><a href="#6、引用类型" class="headerlink" title="6、引用类型"></a>6、引用类型</h1><p>实例（创建一个类C，并在类中建立一个字段Value，并初始化为0。然后在程序的其他地方通过new创建该类的引用类型变量）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">	class C		&#x2F;&#x2F;创建一个类C</span><br><span class="line">	&#123;</span><br><span class="line">		public int Value &#x3D;0;		&#x2F;&#x2F;声明一个公共int类型的变量Value</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	static void Main (string[] args)</span><br><span class="line">	&#123;</span><br><span class="line">		int v1 &#x3D;0;		&#x2F;&#x2F;声明一个int类型变量v1，赋初值为0</span><br><span class="line">		int v2 &#x3D;v1;		&#x2F;&#x2F;声明一个int类型变量v2，并将v1的值赋给v2</span><br><span class="line">		v2 &#x3D; 927;		&#x2F;&#x2F;将v2的值更改为927</span><br><span class="line">		C r1 &#x3D; new C();		&#x2F;&#x2F;使用new关键字创建引用对象</span><br><span class="line">		C r2 &#x3D;r1;			&#x2F;&#x2F;是r1等于r2</span><br><span class="line">		r2.Value &#x3D; 112;		&#x2F;&#x2F;设置r2的Value值</span><br><span class="line">		Console.WriteLine(“Value:&#123;0&#125;,&#123;1&#125;”,v1,v2);		&#x2F;&#x2F;输出v1和v2</span><br><span class="line">		Console.WriteLine(“Refs:&#123;0&#125;,&#123;1&#125;”,r1.Value,r2.Value);		&#x2F;&#x2F;输出引用类型对象的Value值</span><br><span class="line">		Console.ReadLine();</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="7、值类型和引用类型的区别"><a href="#7、值类型和引用类型的区别" class="headerlink" title="7、值类型和引用类型的区别"></a>7、值类型和引用类型的区别</h1><p>实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApp1_Cxiapu</span><br><span class="line">&#123;</span><br><span class="line">	</span><br><span class="line">		class Program</span><br><span class="line">		&#123;</span><br><span class="line">			static void Main(string[] args)</span><br><span class="line">			&#123;</span><br><span class="line">				ReferenceAndValue.Demonstration();      &#x2F;&#x2F;调用类中的方法</span><br><span class="line">				Console.ReadLine();</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		public class stamp</span><br><span class="line">		&#123;</span><br><span class="line">			public string Name &#123; get; set; &#125;        &#x2F;&#x2F;定义引用类型</span><br><span class="line">			public int Age &#123; get; set; &#125;        &#x2F;&#x2F;定义值类型</span><br><span class="line">		&#125;</span><br><span class="line">		public static class ReferenceAndValue</span><br><span class="line">		&#123;</span><br><span class="line">			public static void Demonstration()</span><br><span class="line">			&#123;</span><br><span class="line">				stamp Stamp_1 &#x3D; new stamp &#123; Name &#x3D; &quot;Premiere&quot;, Age &#x3D; 25 &#125;;      &#x2F;&#x2F;实例化</span><br><span class="line">				stamp Stamp_2 &#x3D; new stamp &#123; Name &#x3D; &quot;Again&quot;, Age &#x3D; 47 &#125;;     &#x2F;&#x2F;实例化</span><br><span class="line">				int age &#x3D; Stamp_1.Age;      &#x2F;&#x2F;获取值类型Age的值</span><br><span class="line">				Stamp_1.Age &#x3D; 22;       &#x2F;&#x2F;修改值类型的值</span><br><span class="line">				stamp guru &#x3D; Stamp_2;       &#x2F;&#x2F;获取Stamp_2中的值</span><br><span class="line">				Stamp_2.Name &#x3D; &quot;Again Amend&quot;;       &#x2F;&#x2F;修改引用的Name值</span><br><span class="line">				Console.WriteLine(&quot;Stamp_1&#39;s age:&#123;0&#125;&quot;, Stamp_1.Age);       &#x2F;&#x2F;显示Stamp_1中的Age值</span><br><span class="line">				Console.WriteLine(&quot;age’s value:&#123;0&#125;&quot;, age);       &#x2F;&#x2F;显示age的值</span><br><span class="line">				Console.WriteLine(&quot;Stamp_2’s name:&#123;0&#125;&quot;, Stamp_2.Name);      &#x2F;&#x2F;显示Stamp_2中的Name值</span><br><span class="line">				Console.WriteLine(&quot;guru’s name:&#123;0&#125;&quot;, guru.Name);     &#x2F;&#x2F;显示guru中的Name值</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>





<p><strong>值类型</strong>：<br>创建时就在内存中占用了相应的数值类型的字节数，修改值类型就是修改相应的内存中的值<br><strong>引用类型：</strong><br>创建时指向的是内存中的一个地址，修改他相当于修改对应地址中的值，将对所有引用同一类型的值造成影响（类似于指针）</p>
<h1 id="8、枚举类型"><a href="#8、枚举类型" class="headerlink" title="8、枚举类型"></a>8、枚举类型</h1><pre><code>int(k) = (int)DateTime.Now.DayOfWeek;        //获取当前是星期几</code></pre><h1 id="9、类型转换"><a href="#9、类型转换" class="headerlink" title="9、类型转换"></a>9、类型转换</h1><pre><code>强制转化：</code></pre><p>double x = 19835.165;<br>int y = (int)x;        //强制将double 类型的数转换成 int 类型<br>也可以使用Convert关键字进行强制转换：<br>int y = Convert.ToInt32(x);</p>
<h1 id="10、常量"><a href="#10、常量" class="headerlink" title="10、常量"></a>10、常量</h1><p>利用const 关键字来创建常量，并在创建常量时设置它的初始值一旦设置就不再允许更改</p>
<h1 id="11、移位运算符（-gt-gt-amp-lt-lt-）"><a href="#11、移位运算符（-gt-gt-amp-lt-lt-）" class="headerlink" title="11、移位运算符（&gt;&gt;&amp;&lt;&lt;）"></a>11、移位运算符（&gt;&gt;&amp;&lt;&lt;）</h1><p>将数向指定的的方向移位，超出的位次会丢失，不足的则以0补充</p>
<h1 id="12、字符类Char的使用"><a href="#12、字符类Char的使用" class="headerlink" title="12、字符类Char的使用"></a>12、字符类Char的使用</h1><p>Is开头的方法返回值为bool值（True or False）</p>
<h1 id="13、字符串类String的使用"><a href="#13、字符串类String的使用" class="headerlink" title="13、字符串类String的使用"></a>13、字符串类String的使用</h1><p>可通过Str[num]获取字符串中响应位置的单个字符，string 类型的字符串序号从0开始<br>实例：<br>string Str1 = “CosoleApp1”;<br>char Cha1= Str[0];        //获取C<br>char Cha2 = Str[3]；        //获取第二个o</p>
<p>4.Format方法（格式化字符串，用于将字符串格式化成为指定的格式）<br>    实例：<br>static void Main(string[] args)<br>{<br>string Str1=”11”;<br>string Str2=”22”;<br>string NewStr=String.Format{“{0},{1}!!”,Str1,Str2};        //格式化字符串（此处应注意的是定义字符类型时使用的是string，而调用方法时使用的是String类，S大写）<br>Console.WriteLine(NewStr);        //输出结果为11,22！！<br>Console.ReadLine();<br>}</p>
<p>实例：<br>static void Main(string[] args)<br>{<br>DateTime dt =DateTime.Now;        //定义DateTime类型的变量，并获取当前的系统时间<br>string Str1 = String.Format(“{0:D}”,dt);        //将获取的系统时间格式化为YYYY年MM月dd日<br>Console.WiteLine(Str1)<br>Console.ReadLine();<br>}<br>运行结果：</p>
<p>如果不格式化（//string Str1 = String.Format(“{0:D}”,dt);）运行的结果为：</p>
<p>5.Substring(截取字符串)<br>    实例：<br>static void Main(string[] args)<br>{<br>string Str1 = “abcdef”;<br>string Str2 = “”;        //定义字符串，string类型的是引用类型，必须赋初值<br>Str2 = Str1.Substring(1,4);        //截取字符串，代表将Str1从第二位字符开始截取四位字符<br>Console.WriteLine(Str2);        //输出结果将会是bcde<br>Console.ReadLine();<br>}</p>
<p>6.Split(分割字符串)<br>实例：<br>static void Main(string[] args)<br>{<br>string Str1 = “ab^cd#e,fg”<br>char[] sep = {‘^’,’#’,’,’};        //声明分隔字符的数组<br>String[] sepstring = new String[100];        //声明一个字符串数组<br>sepstring = Str1.Solit(sep);        //作分割处理<br>for (int i=0;i&lt;sepstring.Length.i++)<br>{<br>Console.WriteLine(“item{0}:{1}”,I,sepstring[i]);<br>}<br>Console.ReadLine();<br>}<br>运行结果为：</p>
<p>Split会将所有被指定字符分隔的字符串全部分离，例如<br>string Str1 = “ab^c#d^ef,g”;若将源字符串这样赋值<br>char[] sep = { ‘^’, ‘#’, ‘,’ };分隔字符串不变<br>将输出：</p>
]]></content>
      <tags>
        <tag>C#</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hexo-test/2020/03/03/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
