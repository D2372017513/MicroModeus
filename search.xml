<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C＃学习笔记</title>
    <url>/hexo-test/Game/C%EF%BC%83-StudyNote/</url>
    <content><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>C#程是利用命名空间组织起来的。如果要调用某个命名空间的额类或者方法，则需要用 using 引入命名空间<br>    *using 指令的基本形式：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">using 命名空间名;*</span><br></pre></td></tr></table></figure>
<p>当使用命名空间内的类时 （如一个N1的命名空间有一个类A中有一个方法Myls），需要实例化这个类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*A oa &#x3D; new A();		&#x2F;&#x2F;实例化类</span><br><span class="line">oa.Myls();		&#x2F;&#x2F;调用类A中的Myls方法*</span><br></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">using N1;	&#x2F;&#x2F;使用using指令引入命名空间N1</span><br><span class="line">namespace Test02</span><br><span class="line">&#123;</span><br><span class="line">	class Program</span><br><span class="line">	&#123;</span><br><span class="line">		static void Main(string[] args)</span><br><span class="line">		&#123;</span><br><span class="line">			A oa &#x3D; new A();</span><br><span class="line">			oa.Myls();</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">namespace N1		&#x2F;&#x2F;建立命名空间 N1</span><br><span class="line">&#123;</span><br><span class="line">	class A		&#x2F;&#x2F;在N1中声明一个类A</span><br><span class="line">	&#123;</span><br><span class="line">		public void Myls()</span><br><span class="line">		&#123;</span><br><span class="line">			Console.WriteLine (&quot;...&quot;);		&#x2F;&#x2F;C#中输出字符串</span><br><span class="line">			Console.ReadLine();		&#x2F;&#x2F;等待输入</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>类是一种数据结构，他可以封装数据成员、函数成员和其他的类。C#中的所有语句都必须位于类内。使用任何新的类之前都必须声明它，一个类一旦被声明，就可以当做一种新的类型来使用。在C#中通过class关键字来声明。<br>实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Class MyClass</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h2><img data-src="/hexo-test/Game/C%EF%BC%83-StudyNote/Main1.png" class>


<h2 id="标识符及关键字"><a href="#标识符及关键字" class="headerlink" title="标识符及关键字"></a>标识符及关键字</h2><p>标识符命名规则：<br>要注意的是C#的标识符只能由数字、字母和下划线组成，并且必须以字符或者下划线开头。<font color="red">在对类、变量、方法等进行命名时，应避免与标识符和关键字重名，否则可能导致所编写的程序中响应的引用出现未知的错误。</font></p>
<h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><p>C#中变量的类型分为值类型和引用类型两类，如同C语言一般，C#的值类型变量也分为整数类型、浮点类型和布尔类型。</p>
<h3 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h3><p>1、整数类型</p>
<p> C#中的整数类型有sbyte、short、int、long、byte、ushort、uint、ulong<br><font color="green" size="1.5">其中值得注意的是：byte类型和short类型都是范围比较小的整数，如果正整数范围没有超过65535，声明为ushort类型即可，当数值适用于byte时要注意数值的大小，否则可能导致运算溢出的错误。</font></p>
<p>2、浮点类型</p>
<p>浮点类型主要用于处理含有小数的数值数据，浮点类型主要包含float和double两种数值类型。</p>
<ul>
<li><font color="red" size="1.5">如不作任何设置，则一切含有小数的数值都将被认为是double类型</font></li>
</ul>
<p>3、布尔类型</p>
<p>布尔类型主要用来表示true/false值，一个布尔型变量的值只能是true/false，不能将其他的值赋给布尔变量，也不能与其他的变量进行转换。</p>
<p>4、常量</p>
<p>利用const 关键字来创建常量，并在创建常量时设置它的初始值一旦设置就不再允许更改</p>
<p> 5、数值的强制转换</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">float MySum &#x3D; 9.27f	&#x2F;&#x2F;使用f强制指定为float类型</span><br><span class="line">double MyDou &#x3D; 927d	&#x2F;&#x2F;使用d强制指定为double类型</span><br><span class="line">double x &#x3D; 19835.165;</span><br><span class="line">int y &#x3D; (int)x;		&#x2F;&#x2F;强制将double 类型的数转换成 int 类型</span><br><span class="line">也可以使用Convert关键字进行强制转换：</span><br><span class="line">int y &#x3D; Convert.ToInt32(x);</span><br></pre></td></tr></table></figure>
<ul>
<li>如果需要使用float类型的变量，必须在数值的后面紧跟f或F，否则编译器将将其作为double类型的变量处理，也可以在double类型变量的前面加上（float）对其进行强制转换。</li>
</ul>
<h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3> <img data-src="/hexo-test/Game/C%EF%BC%83-StudyNote/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B.png" class title="引用类型">
 <img data-src="/hexo-test/Game/C%EF%BC%83-StudyNote/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B1.png" class title="引用类型">

<p>实例（创建一个类C，并在类中建立一个字段Value，并初始化为0。然后在程序的其他地方通过new创建该类的引用类型变量）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">	class C		&#x2F;&#x2F;创建一个类C</span><br><span class="line">	&#123;</span><br><span class="line">		public int Value &#x3D;0;		&#x2F;&#x2F;声明一个公共int类型的变量Value</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	static void Main (string[] args)</span><br><span class="line">	&#123;</span><br><span class="line">		int v1 &#x3D;0;		&#x2F;&#x2F;声明一个int类型变量v1，赋初值为0</span><br><span class="line">		int v2 &#x3D;v1;		&#x2F;&#x2F;声明一个int类型变量v2，并将v1的值赋给v2</span><br><span class="line">		v2 &#x3D; 927;		&#x2F;&#x2F;将v2的值更改为927</span><br><span class="line">		C r1 &#x3D; new C();		&#x2F;&#x2F;使用new关键字创建引用对象</span><br><span class="line">		C r2 &#x3D;r1;			&#x2F;&#x2F;是r1等于r2</span><br><span class="line">		r2.Value &#x3D; 112;		&#x2F;&#x2F;设置r2的Value值</span><br><span class="line">		Console.WriteLine(“Value:&#123;0&#125;,&#123;1&#125;”,v1,v2);		&#x2F;&#x2F;输出v1和v2</span><br><span class="line">		Console.WriteLine(“Refs:&#123;0&#125;,&#123;1&#125;”,r1.Value,r2.Value);		&#x2F;&#x2F;输出引用类型对象的Value值</span><br><span class="line">		Console.ReadLine();</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img data-src="/hexo-test/Game/C%EF%BC%83-StudyNote/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E5%AE%9E%E4%BE%8B%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C.png" class title="结果">

<h3 id="值类型和引用类型的区别"><a href="#值类型和引用类型的区别" class="headerlink" title="值类型和引用类型的区别"></a>值类型和引用类型的区别</h3><p>实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">namespace ConsoleApp1_Cxiapu</span><br><span class="line">&#123;</span><br><span class="line">	</span><br><span class="line">		class Program</span><br><span class="line">		&#123;</span><br><span class="line">			static void Main(string[] args)</span><br><span class="line">			&#123;</span><br><span class="line">				ReferenceAndValue.Demonstration();      &#x2F;&#x2F;调用类中的方法</span><br><span class="line">				Console.ReadLine();</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		public class stamp</span><br><span class="line">		&#123;</span><br><span class="line">			public string Name &#123; get; set; &#125;        &#x2F;&#x2F;定义引用类型</span><br><span class="line">			public int Age &#123; get; set; &#125;        &#x2F;&#x2F;定义值类型</span><br><span class="line">		&#125;</span><br><span class="line">		public static class ReferenceAndValue</span><br><span class="line">		&#123;</span><br><span class="line">			public static void Demonstration()</span><br><span class="line">			&#123;</span><br><span class="line">				stamp Stamp_1 &#x3D; new stamp &#123; Name &#x3D; &quot;Premiere&quot;, Age &#x3D; 25 &#125;;      &#x2F;&#x2F;实例化</span><br><span class="line">				stamp Stamp_2 &#x3D; new stamp &#123; Name &#x3D; &quot;Again&quot;, Age &#x3D; 47 &#125;;     &#x2F;&#x2F;实例化</span><br><span class="line">				int age &#x3D; Stamp_1.Age;      &#x2F;&#x2F;获取值类型Age的值</span><br><span class="line">				Stamp_1.Age &#x3D; 22;       &#x2F;&#x2F;修改值类型的值</span><br><span class="line">				stamp guru &#x3D; Stamp_2;       &#x2F;&#x2F;获取Stamp_2中的值</span><br><span class="line">				Stamp_2.Name &#x3D; &quot;Again Amend&quot;;       &#x2F;&#x2F;修改引用的Name值</span><br><span class="line">				Console.WriteLine(&quot;Stamp_1&#39;s age:&#123;0&#125;&quot;, Stamp_1.Age);       &#x2F;&#x2F;显示Stamp_1中的Age值</span><br><span class="line">				Console.WriteLine(&quot;age’s value:&#123;0&#125;&quot;, age);       &#x2F;&#x2F;显示age的值</span><br><span class="line">				Console.WriteLine(&quot;Stamp_2’s name:&#123;0&#125;&quot;, Stamp_2.Name);      &#x2F;&#x2F;显示Stamp_2中的Name值</span><br><span class="line">				Console.WriteLine(&quot;guru’s name:&#123;0&#125;&quot;, guru.Name);     &#x2F;&#x2F;显示guru中的Name值</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<img data-src="/hexo-test/Game/C%EF%BC%83-StudyNote/%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%80%BC%E7%B1%BB%E5%9E%8B%E5%8C%BA%E5%88%AB.png" class title="结果">



<p><strong>值类型：</strong><br>创建时就在内存中占用了相应的数值类型的字节数，修改值类型就是修改相应的内存中的值<br><strong>引用类型：</strong><br>创建时指向的是内存中的一个地址，修改他相当于修改对应地址中的值，将对所有引用同一类型的值造成影响（类似于指针）</p>
<h3 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h3><p> C#中使用enum来声明枚举变量，它用于声明一组具有相同性质的常量。</p>
<ul>
<li>在定义枚举类型时，如果不对其进行赋值，默认情况下，第一个枚举数的值为0，后面每个枚举值依次加一。</li>
</ul>
<p>实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">	enum MyDate		&#x2F;&#x2F;使用enum创建枚举类型</span><br><span class="line">	&#123;</span><br><span class="line">		Sun &#x3D; 0,</span><br><span class="line">		Mon &#x3D; 1,</span><br><span class="line">		Tue &#x3D; 2,</span><br><span class="line">		Wed &#x3D; 3，</span><br><span class="line">		Thi &#x3D; 4,</span><br><span class="line">		Fri &#x3D; 5,</span><br><span class="line">		Sat &#x3D; 6</span><br><span class="line">	&#125;</span><br><span class="line">	static void Main (string[] args)</span><br><span class="line">	&#123;</span><br><span class="line">		int k &#x3D; (int)DateTime.Now.DayOfWeek;		&#x2F;&#x2F;获取今天是星期几，并将获取的值强制转换成int类型</span><br><span class="line">		switch(k)</span><br><span class="line">		&#123;</span><br><span class="line">			case (int)MyDate.Sun: </span><br><span class="line">			Console.WriteLine(&quot;今天是星期日“）；</span><br><span class="line">			break；</span><br><span class="line">			case (int)MyDate.Mon: </span><br><span class="line">			Console.WriteLine(&quot;今天是星期一“）；</span><br><span class="line">			break；</span><br><span class="line">			case (int)MyDate.Tue: </span><br><span class="line">			Console.WriteLine(&quot;今天是星期二“）；</span><br><span class="line">			break；</span><br><span class="line">			case (int)MyDate.Wed: </span><br><span class="line">			Console.WriteLine(&quot;今天是星期三“）；</span><br><span class="line">			break；</span><br><span class="line">			case (int)MyDate.Thi: </span><br><span class="line">			Console.WriteLine(&quot;今天是星期四“）；</span><br><span class="line">			break；</span><br><span class="line">			case (int)MyDate.Fri: </span><br><span class="line">			Console.WriteLine(&quot;今天是星期五“）；</span><br><span class="line">			break；</span><br><span class="line">			case (int)MyDate.Sat: </span><br><span class="line">			Console.WriteLine(&quot;今天是星期六“）；</span><br><span class="line">			break；</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">		Console.ReadLine();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注： </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int(k) &#x3D; (int)DateTime.Now.DayOfWeek;		&#x2F;&#x2F;获取当前是星期几</span><br></pre></td></tr></table></figure>
<h1 id="字符操作"><a href="#字符操作" class="headerlink" title="字符操作"></a>字符操作</h1><h2 id="移位运算符（-gt-gt-amp-lt-lt-）"><a href="#移位运算符（-gt-gt-amp-lt-lt-）" class="headerlink" title="移位运算符（&gt;&gt;&amp;&lt;&lt;）"></a>移位运算符（&gt;&gt;&amp;&lt;&lt;）</h2><p>将数向指定的的方向移位，超出的位次会丢失，不足的则以0补充</p>
<ul>
<li>说明：<font size="1.5">在右移时,如果第一个操作数为int或uint (32位数),则移位数由第二个操作数的低5· 位给出;如果第一个操作数为long或ulong (64位数),则移位数由第二个操作数的低6位给出;如果第一个操作数为int或long,则右移位是算术移位(高序空位设置为符号位),如果第一个操作数为uint或ulong类型,则右移位是逻辑移位(高位填充0).</font></li>
</ul>
<h2 id="字符类Char的使用"><a href="#字符类Char的使用" class="headerlink" title="字符类Char的使用"></a>字符类Char的使用</h2><img data-src="/hexo-test/Game/C%EF%BC%83-StudyNote/Char'suse1.png" class>
<img data-src="/hexo-test/Game/C%EF%BC%83-StudyNote/Char'suse2.png" class>



<p>Is开头的方法返回值为bool值（True or False）</p>
<h2 id="字符串类String的使用"><a href="#字符串类String的使用" class="headerlink" title="字符串类String的使用"></a>字符串类String的使用</h2><p>可通过Str[num]获取字符串中响应位置的单个字符，string 类型的字符串序号从0开始<br>实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string Str1 &#x3D; “CosoleApp1”;</span><br><span class="line">char Cha1&#x3D; Str[0];		&#x2F;&#x2F;获取C</span><br><span class="line">char Cha2 &#x3D; Str[3]；		&#x2F;&#x2F;获取第二个o</span><br></pre></td></tr></table></figure>
<p>1、 Compare 方法</p>
<p>Compare方法用来比较两个字符串是否相等，它有很多的重载方法，其中最常见的两种方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Int Compare(string StrA,string StrB)		&#x2F;&#x2F;StrA和StrB代表要比较的两个字符串</span><br><span class="line">Int Compare(string StrA,string StrB,bool ignorCase)		&#x2F;&#x2F;ignorCase是一个布尔型变量，如果为true，那么在比较的时候就忽略大小写的差别。Compare方法是一个静态方法，所以在使用时可以直接使用</span><br></pre></td></tr></table></figure>
<p>2、 Equals 方法</p>
<p>Equals方法主要用于比较两个字符串是否相同，如果是则返回true，否则为false，常用语法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public bool Equals (string value)		&#x2F;&#x2F;value是要跟实例比较的字符串</span><br><span class="line">public static bool Equals (string a,string b)		&#x2F;&#x2F;a、b是两个要比较的字符串</span><br></pre></td></tr></table></figure>
<p>实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static void Main (string[] args)</span><br><span class="line">&#123;</span><br><span class="line">	string Str1 &#x3D; &quot;我要开学&quot;；</span><br><span class="line">	string Str2 &#x3D; &quot;我要写作业&quot;；</span><br><span class="line">	Console.WriteLine (Str1.Equals(Str2));</span><br><span class="line">	Console.WriteLine (String.Equals(Str1,Str2));</span><br><span class="line">	Console.ReadLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果为：<br>False<br>False</p>
<p>3、 Format方法（格式化字符串，用于将字符串格式化成为指定的格式）</p>
<p>实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">	string Str1&#x3D;”11”;</span><br><span class="line">	string Str2&#x3D;”22”;</span><br><span class="line">	string NewStr&#x3D;String.Format&#123;“&#123;0&#125;,&#123;1&#125;!!”,Str1,Str2&#125;;		&#x2F;&#x2F;格式化字符串（此处应注意的是定义字符类型时使用的是string，而调用方法时使用的是String类，S大写）</span><br><span class="line">	Console.WriteLine(NewStr);		&#x2F;&#x2F;输出结果为11,22！！</span><br><span class="line">	Console.ReadLine(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img data-src="/hexo-test/Game/C%EF%BC%83-StudyNote/Date'sRule.png" class>

<p>实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">	DateTime dt &#x3D;DateTime.Now;		&#x2F;&#x2F;定义DateTime类型的变量，并获取当前的系统时间</span><br><span class="line">	string Str1 &#x3D; String.Format(“&#123;0:D&#125;”,dt);		&#x2F;&#x2F;将获取的系统时间格式化为YYYY年MM月dd日</span><br><span class="line">	Console.WiteLine(Str1)</span><br><span class="line">	Console.ReadLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<img data-src="/hexo-test/Game/C%EF%BC%83-StudyNote/Format1.png" class> 

<p>如果不格式化（//string Str1 = String.Format(“{0:D}”,dt);）运行的结果为：</p>
<img data-src="/hexo-test/Game/C%EF%BC%83-StudyNote/Format2.png" class> 

<p>4、 Substring(截取字符串)<br>实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">	string Str1 &#x3D; “abcdef”;</span><br><span class="line">	string Str2 &#x3D; “”;		&#x2F;&#x2F;定义字符串，string类型的是引用类型，必须赋初值</span><br><span class="line">	Str2 &#x3D; Str1.Substring(1,4);		&#x2F;&#x2F;截取字符串，代表将Str1从第二位字符开始截取四位字符</span><br><span class="line">	Console.WriteLine(Str2);		&#x2F;&#x2F;输出结果将会是bcde</span><br><span class="line">	Console.ReadLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>说明：<font size="1.5">在使用Substring方法截取字符串时，如果length参数的长度大于截取字符串的长度，将从起始位置的索引处截取之后的所有字符。</font></li>
</ul>
<p>5、 Split(分割字符串)</p>
<p>实例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static void Main(string[] args)</span><br><span class="line">&#123;</span><br><span class="line">	string Str1 &#x3D; “ab^cd#e,fg”</span><br><span class="line">	char[] sep &#x3D; &#123;‘^’,’#’,’,’&#125;;		&#x2F;&#x2F;声明分隔字符的数组</span><br><span class="line">	String[] sepstring &#x3D; new String[100];		&#x2F;&#x2F;声明一个字符串数组</span><br><span class="line">	sepstring &#x3D; Str1.Solit(sep);		&#x2F;&#x2F;作分割处理</span><br><span class="line">	for (int i&#x3D;0;i&lt;sepstring.Length.i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Console.WriteLine(“item&#123;0&#125;:&#123;1&#125;”,I,sepstring[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	Console.ReadLine();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果为：</p>
<img data-src="/hexo-test/Game/C%EF%BC%83-StudyNote/SplitRun1.png" class>

<p>Split会将所有被指定字符分隔的字符串全部分离，例如<br>string Str1 = “ab^c#d^ef,g”;若将源字符串这样赋值<br>char[] sep = { ‘^’, ‘#’, ‘,’ };分隔字符串不变<br>将输出：</p>
<img data-src="/hexo-test/Game/C%EF%BC%83-StudyNote/SplitRun2.png" class>


]]></content>
      <categories>
        <category>Game</category>
      </categories>
      <tags>
        <tag>C＃</tag>
        <tag>Game</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hexo-test/uncategorized/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>

<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
